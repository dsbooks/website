// Below is an a reference for the values that a component's properties may take

/* 
NOTE 1: for all connection types, the options are as follows:

open        (the connection is always active)
none        (the connection does not exist)
on-demand   (the connection can be activated at will by either end of the connection)
on-demand-u (the connection can only be activated by the other component in the connection)
on-demand-d (the connection can only be activated by the described component in the connection)
variable    (the connection differs between different instances of the same component)

NOTE 2: a Component (any time the word is used) refers specifically to a type of component that is a direct child of a particular collective. There can be multiple instances of the same component type within the same intelligence, and these all have the same entry (the various "Count" values declare how many). There may be other instances of the same component type in other collectives as well, but these do not count towards the component "Count" values, as they do not belong to the same parent intelligence.
*/

export interface Component {
  id: number; // unique id (not per component, but per type of component at this depth of the overall intelligence structure)
  name: string | undefined; // optional name for the component
  type: string | [string]; // the structure type of the component (use an array if there is more than one type, which should only be the case if groupSummary is true)
  groupSummary: boolean; // whether or not this component represents a number of different types of components with similar purposes; if so, then all spectrum and degree values are averages, all counts are totals, and all collections are left empty unless all represented components share the same collection
  componentIdentity: number; // the average component identity value for the identity spectrum (0 for no value, 1 for maximum value)
  collectiveIdentity: number; // the average collective identity value for the identity spectrum (0 for no value, 1 for maximum value)
  originalCount: number; // the number of instances of this type of component that were originally a part of its parent collective
  assimilatedCount: number; // the number of instances of this type of component that were assimilated by its parent collective (or were assimilated by other components then transferred in)
  generatedCount: number; // the number of instances of this type of component that were generated by its parent collective (or were generated by other components then transferred in)
  otherCount: number; // the number of instances of this type of component that have no origin (such as the component formed by a union of sub-components); these count as original instances for the sake of classification
  integrationSpectrum: number | undefined; // the average degree of forcible integration (mental rewriting) of sub-components into this component (0 for none, 1 for 100%)
  sharedWillDegree: number | undefined; // the degree to which a common will is shared amongst all instances of this type of component within the same parent collective (0 for none, 1 for 100%)
  sharedKnowledgeDegree: number | undefined; // the degree to which knowledge is shared amongst all instances of this type of component within the same parent collective (0 for none, 1 for 100%)
  sharedPersonalityDegree: number | undefined; // the degree to which a common personality is shared amongst all instances of this type of component within the same parent collective (0 for none, 1 for 100%)
  componentExchangeAllowed: boolean | undefined; // whether or not instances of this type of component can be shared between one another (restricted to only components sharing the same parent collective)
  fluidRange: [string]; // the base structures that the component can mimic (including hybridizing structures) if applicable
  potentialTransformations: [
    // the potential fundamental transformations that this component's structure can undergo; note that "reversible" transformations should only be listed if the component has a history of regularly making use of that transformation. Furthermore, this does NOT include transformations due to the intelligence being fluid. These transformations must either be irreversible or induced by outside forces.
    {
      type: string; // the structure type
      transformationNature: string; // the nature of the transformation (can be "reversible" [outside assistance is required for the transformation], "future" [the transformation has not yet occurred and cannot be reversed under normal circumstances, such as a transformation occurring as part of a natural maturation process], or "past" [a form that was taken in the past but that cannot be returned to under normal circumstances])
    }
  ];
  siblings: [
    // the list of non-identical sibling component types
    {
      id: number; // the id of the sibling
      siblingAssimilationDirection: string; // the direction that this sibling may assimilate or be assimilated by its siblings ("down" if the sibling can assimilate the current component, "up" if it can be assimiliated by the current component, "both" if it can do both, "none" if assimilation is impossible)
      siblingComponentExchangeDirection: string; // the direction that this sibling may share components ("down" if the sibling can receive components, "up" if it can donate components, "both" if it can do both, "none" if components cannot be shared)
      siblingWillUpConnection: string; // the connection type for imposing will onto the siblings in question
      siblingWillDownConnection: string; // the connection type for the siblings in question imposing their will onto this component
      siblingWillUpDegree: number; // the degree to which the component can impose its will on its siblings (0 - 1)
      siblingWillDownDegree: number; // the degree to which the siblings can impose their will onto this component (0 - 1)
      siblingKnowledgeUpConnection: string; // the connection type for passing knowledge to siblings
      siblingKnowledgeDownConnection: string; // the connection type for receiving knowledge from siblings
      siblingKnowledgeUpDegree: number; // the degree to which the component can share its will on its siblings (0 - 1)
      siblingKnowledgeDownDegree: number; // the degree to which the siblings can impose their will onto this component (0 - 1)
      siblingPersonalityUpConnection: string; // the connection type for allowing siblings to access personality traits of the component
      siblingPersonalityDownConnection: string; // the connection type for accessing personality traits from siblings
      siblingPersonalityUpDegree: number; // the degree to which the siblings can adopt the personality of the component (0 - 1)
      siblingPersonalityDownDegree: number; // the degree to which the component can adopt the personalities of the siblings (0 - 1)
    }
  ];
  components: [
    // the list of components that make up this component's intelligence
    {
      id: number; // the id of the component
      parentWillUpConnection: string; // the connection type for imposing will onto the parent(s) in question
      parentWillDownConnection: string; // the connection type for the parent(s) in question imposing their will onto this component
      parentWillUpDegree: number; // the degree to which the component can impose its will on its parent(s) (0 - 1)
      parentWillDownDegree: number; // the degree to which the parent(s) can impose their will onto this component (0 - 1)
      parentKnowledgeUpConnection: string; // the connection type for passing knowledge to parent(s)
      parentKnowledgeDownConnection: string; // the connection type for receiving knowledge from parent(s)
      parentKnowledgeUpDegree: number; // the degree to which the component can share its will on its parent(s) (0 - 1)
      parentKnowledgeDownDegree: number; // the degree to which the parent(s) can impose their will onto this component (0 - 1)
      parentPersonalityUpConnection: string; // the connection type for allowing parent(s) to access personality traits of the component
      parentPersonalityDownConnection: string; // the connection type for accessing personality traits from parent(s)
      parentPersonalityUpDegree: number; // the degree to which the parent(s) can adopt the personality of the component (0 - 1)
      parentPersonalityDownDegree: number; // the degree to which the component can adopt the personalities of the parent(s) (0 - 1)
      structureNature: string; // the nature of the child component structure (can be "permanent", "effectively permanent" [it can technically be dissolved or removed but is essentially a permanent construct regardless], "semi-permanent" [some but not all instances of the component are permanent], "effectively semi-permanent" [at least some instances of the component are effectively permanent, but none are truly permanent], "reversible" [the component regularly transitions into and out of other components], and "ephemeral" [the existence of the component is not guaranteed to remain within the collective at all])
    }
  ];
}
